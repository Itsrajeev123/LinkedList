/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
            //approach-1 (using map)
            // map<ListNode,int>mp;
            // temp=headA;
            // while(temp!=NULL){
            //     mp[temp]=headA ke saare nodes mp mein store krwa liye;
            //     temp=temp->next;
            // }
            // temp=headB;
            // while(temp!=NULL){
            //     if(mp.find[temp]){
            //         return temp;
            //     }
            //     temp=temp->next;
            // }
            // return NULL;

            //approach-2 brute force

            //approach-3 most optimized and useful

            if(!headA || !headB){
                return NULL;
            }
            ListNode* t1=headA;
            ListNode* t2=headB;
            while(t1!=t2){
                t1=t1->next;
                t2=t2->next;
                if(t1==t2){
                    return t1;
                }
                if(t1==NULL){
                    t1=headB;
                }
                if(t2==NULL){
                    t2=headA;
                }
            }
            return t1;
    }
};
