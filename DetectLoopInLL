 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 
class Solution {
public:
    bool hasCycle(ListNode *head) {
        //approach-2(floyd cycle detection)
        ListNode *fast = head;
        ListNode *slow = head;
        while(fast != NULL && fast ->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
            if(fast == slow)
                return true;
        }
        return false;

        //approach-1
        // if(head==NULL || head->next==NULL){
        //     return false;
        // }
        // map<ListNode* ,bool> visited;
        // ListNode* temp=head;
        // while(temp!=NULL){
        //     if(visited[temp]==true){
        //         return true;
        //     }
        //     visited[temp]=true;
        //     temp=temp->next;
        // }
        // return true;

    }
};
