  struct ListNode {
      int val;
      ListNode *next;
      ListNode() : val(0), next(nullptr) {}
      ListNode(int x) : val(x), next(nullptr) {}
      ListNode(int x, ListNode *next) : val(x), next(next) {}
  };
 
class Solution {
public:
    //approach-1 fast and slow less TC
    ListNode* getMiddle(ListNode* head){
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* fast=head->next;
        ListNode* slow=head;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
            }
            slow=slow->next;
        }
        return slow;
    }

    //appraoch -2 length count krke then middle nikalna more TC
    // int getLength(ListNode* head){
    //     int len=0;
    //     while(head!=NULL){
    //         len++;
    //         head=head->next;
    //     }
    //     return len;
    // }

    ListNode* middleNode(ListNode* head) {
        return getMiddle(head);
        // int len=getLength(head);
        // int ans=len/2;
        // int cnt=0;
        // ListNode* temp=head;
        // while(cnt<ans){
        //     temp=temp->next;
        //     cnt++;
        // }
        // return temp;

    }
};
